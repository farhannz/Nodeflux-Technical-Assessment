# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Ubuntu CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install Boost
      run: |
            sudo apt-get install -y build-essential gdb wget git libssl-dev clang-format && \
            mkdir ~/temp && cd ~/temp && \
            sudo apt-get install -y cmake && \
            cd ~/temp &&  wget -q https://sourceforge.net/projects/boost/files/boost/1.81.0/boost_1_81_0.tar.gz && \
            tar -zxf boost_1_81_0.tar.gz && cd ~/temp/boost_1_81_0 && ./bootstrap.sh && sudo bash -c "./b2 cxxflags="-std=c++11" --reconfigure --with-fiber --with-context --with-atomic --with-date_time --with-filesystem --with-url install"
    
    - name: install libpq
      run : |
            apt-get install -y libpq-dev libsqlite3-dev unzip && \
            cd ~/temp && \
            git clone https://github.com/jtv/libpqxx.git && cd libpqxx && \
            git checkout 7.7.4 && \
            mkdir build && cd build && \
            cmake .. -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql/libpq && \
            make -j6 && sudo make install && \
            cd ~/temp && \
            wget https://github.com/SOCI/soci/archive/refs/heads/master.zip && \
            unzip master.zip && \
            cd soci-master && \
            mkdir build && cd build && \
            cmake .. -DWITH_BOOST=ON -DWITH_POSTGRESQL=ON -DWITH_SQLITE3=ON -DCMAKE_CXX_STANDARD=14 -DSOCI_CXX11=ON && \
            make -j6 && sudo make install

    - name: Install Libasyik
      run : |
            cd ~/temp  && \
            git clone https://github.com/okyfirmansyah/libasyik && \
            cd ~/temp/libasyik && \
            git submodule update --init --recursive && \
            mkdir build && \
            cd build && \
            cmake .. && \
            make -j4 && \
            sudo make install
    - name: Install spdlog
      run : |
            cd ~/temp && \
            git clone https://github.com/gabime/spdlog.git && \
            cd spdlog && mkdir build && cd build && \
            cmake .. && make -j && sudo make install

    - name: Install OpenCV
      run: sudo apt-get install -y libopencv-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
